# importar bibliotecas necessárias
import numpy as np
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.optimizers import Adam
from keras.utils import np_utils

# carregar o conjunto de dados de treinamento e teste
X_train, y_train = load_dataset("train_dataset.npy")
X_test, y_test = load_dataset("test_dataset.npy")

# normalizar os dados
X_train = X_train.astype("float32") / 255.0
X_test = X_test.astype("float32") / 255.0

# converter os rótulos para categóricos
y_train = np_utils.to_categorical(y_train, num_classes)
y_test = np_utils.to_categorical(y_test, num_classes)

# criar o modelo
model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=input_shape))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128))
model.add(Activation("relu"))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation("softmax"))

# compilar e treinar o modelo
model.compile(loss="categorical_crossentropy", optimizer=Adam(), metrics=["accuracy"])
model.fit(X_train, y_train, batch_size=32, epochs=10, validation_data=(X_test, y_test))

# avaliar o modelo
score = model.evaluate(X_test, y_test, verbose=0)
print("Test loss:", score[0])
print("Test accuracy:", score[1])
